{
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-04T17:25:51.972Z",
    "end": "2025-09-04T17:25:53.020Z",
    "duration": 1048,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "caf14d59-688d-4ca3-b6e7-30a4e9430f6f",
      "title": "",
      "fullFile": "cypress\\e2e\\API-TEST\\INTERNAL_TRANSACTION\\xcash_to-other-countries.cy.js",
      "file": "cypress\\e2e\\API-TEST\\INTERNAL_TRANSACTION\\xcash_to-other-countries.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9d61b077-23f2-4f6d-ad5d-b72b3dd0e146",
          "title": "XCASH API Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "983bbc57-6e90-4a76-8e08-df1e3fcc1f05",
              "title": "Successful XCASH Transfer",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should process of xcash transaction and return success response",
                  "fullTitle": "XCASH API Tests Successful XCASH Transfer should process of xcash transaction and return success response",
                  "timedOut": null,
                  "duration": 260,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: validEndpoint,\n  body: requestBody,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}).then(response => {\n  // Validate response status\n  expect(response.status).to.equal(200);\n  // Validate response structure\n  const responseSchema = {\n    title: 'Cash Transfer Response Schema',\n    type: 'object',\n    required: ['command-id', 'trans-id', 'request-id', 'status', 'message'],\n    properties: {\n      'command-id': {\n        type: 'string'\n      },\n      'trans-id': {\n        type: 'string'\n      },\n      'request-id': {\n        type: 'string'\n      },\n      'status': {\n        type: 'integer'\n      },\n      'message': {\n        type: 'string'\n      }\n    }\n  };\n  expect(response.body).to.be.jsonSchema(responseSchema);\n  // Validate response values\n  expect(response.body['command-id']).to.equal('XCASH');\n  expect(response.body['request-id']).to.equal(randomId);\n  expect(response.body.status).to.equal(0);\n  expect(response.body['trans-id']).to.match(/^XCASH\\d{6}\\.\\d{4}\\.R\\d{5}$/);\n  expect(response.body.message).to.contains('Vous avez transfere');\n});",
                  "err": {},
                  "uuid": "bccc5678-4d26-4d1e-b952-b713bf081ab8",
                  "parentUUID": "983bbc57-6e90-4a76-8e08-df1e3fcc1f05",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bccc5678-4d26-4d1e-b952-b713bf081ab8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 260,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "28586bfd-928a-4064-970f-1007c2912dfb",
              "title": "Failed response",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return 404 for invalid endpoint",
                  "fullTitle": "XCASH API Tests Failed response should return 404 for invalid endpoint",
                  "timedOut": null,
                  "duration": 199,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.request({\n  method: 'POST',\n  url: invalidEndpoint,\n  body: requestBody,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  // Verify Not Found response\n  expect(response.status).to.equal(404);\n});",
                  "err": {},
                  "uuid": "0ca911b5-0f07-4da9-997f-ebeb3da17ba9",
                  "parentUUID": "28586bfd-928a-4064-970f-1007c2912dfb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return invalid PIN message",
                  "fullTitle": "XCASH API Tests Failed response should return invalid PIN message",
                  "timedOut": null,
                  "duration": 136,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidPINBody = {\n  \"request-id\": randomId,\n  \"sender\": \"2250102919300\",\n  \"destination\": \"XBORDER_SEND_BJ\",\n  \"command-id\": \"XCASH\",\n  \"auth\": \"1234\",\n  //invalid PIN\n  \"amount\": \"500\",\n  \"remarks\": \"\",\n  \"extended-data\": {\n    \"custommessage\": \"\",\n    \"lang\": \"F\",\n    \"cellid\": \"1234\",\n    \"biller-reference\": \"\",\n    \"ext2\": \"\",\n    \"ext1\": \"\",\n    \"biller-code\": \"\",\n    \"biller-name\": \"XBORDER_SEND_BJ\",\n    \"account-number\": \"\",\n    \"recipient\": \"2290101080452\"\n  }\n};\ncy.request({\n  method: 'POST',\n  url: validEndpoint,\n  body: invalidPINBody,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body['command-id']).to.equal('XCASH');\n  expect(response.body['request-id']).to.equal(randomId);\n  expect(response.body.status).to.equal(8);\n  expect(response.body['trans-id']).to.match(/^XCASH\\d{6}\\.\\d{4}\\.R\\d{5}$/);\n  // Validate message content\n  const invalidPINmessage = [\"Le code secret que vous avez saisi est errone,veuillez reessayer svp ou  RDV avec votre piece d'identite dans l'agence Moov la plus proche pour le reinitialiser.\"];\n  invalidPINmessage.forEach(part => {\n    expect(response.body.message).to.include(part);\n  });\n});",
                  "err": {},
                  "uuid": "71edc185-a8e1-40c0-ae43-6402cad47422",
                  "parentUUID": "28586bfd-928a-4064-970f-1007c2912dfb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return not authorized destination number message",
                  "fullTitle": "XCASH API Tests Failed response should return not authorized destination number message",
                  "timedOut": null,
                  "duration": 147,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidDestinationNumberBody = {\n  \"request-id\": randomId,\n  \"sender\": \"2250102919300\",\n  \"destination\": \"invalid_destination\",\n  //not authorized\n  \"command-id\": \"XCASH\",\n  \"auth\": \"2222\",\n  \"amount\": \"200\",\n  \"remarks\": \"\",\n  \"extended-data\": {\n    \"custommessage\": \"\",\n    \"lang\": \"F\",\n    \"cellid\": \"1234\",\n    \"biller-reference\": \"\",\n    \"ext2\": \"\",\n    \"ext1\": \"\",\n    \"biller-code\": \"\",\n    \"biller-name\": \"XBORDER_SEND_BJ\",\n    \"account-number\": \"\",\n    \"recipient\": \"2290101080452\"\n  }\n};\ncy.request({\n  method: 'POST',\n  url: validEndpoint,\n  body: invalidDestinationNumberBody,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body['command-id']).to.equal('XCASH');\n  expect(response.body['request-id']).to.equal(randomId);\n  expect(response.body.status).to.equal(51);\n  expect(response.body['trans-id']).to.match(/^XCASH\\d{6}\\.\\d{4}\\.R\\d{5}$/);\n  // Validate message content\n  const invalidDestinationNumberMESSAGE = [\"Desole, le numero du destinataire n'est pas autorise a recevoir un transfert d'argent.\"];\n  invalidDestinationNumberMESSAGE.forEach(part => {\n    expect(response.body.message).to.include(part);\n  });\n});",
                  "err": {},
                  "uuid": "d01e7c27-0f6d-459b-89ec-83847b36e17e",
                  "parentUUID": "28586bfd-928a-4064-970f-1007c2912dfb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should return invalid sender number message",
                  "fullTitle": "XCASH API Tests Failed response should return invalid sender number message",
                  "timedOut": null,
                  "duration": 206,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const invalidsenderNumberBody = {\n  \"request-id\": randomId,\n  \"sender\": \"invalid_sender\",\n  //invalid sender number\n  \"destination\": \"XBORDER_SEND_BJ\",\n  \"command-id\": \"XCASH\",\n  \"auth\": \"2222\",\n  \"amount\": \"200\",\n  \"remarks\": \"\",\n  \"extended-data\": {\n    \"custommessage\": \"\",\n    \"lang\": \"F\",\n    \"cellid\": \"1234\",\n    \"biller-reference\": \"\",\n    \"ext2\": \"\",\n    \"ext1\": \"\",\n    \"biller-code\": \"\",\n    \"biller-name\": \"XBORDER_SEND_BJ\",\n    \"account-number\": \"\",\n    \"recipient\": \"2290101080452\"\n  }\n};\ncy.request({\n  method: 'POST',\n  url: validEndpoint,\n  body: invalidsenderNumberBody,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body['command-id']).to.equal('XCASH');\n  expect(response.body['request-id']).to.equal(randomId);\n  expect(response.body.status).to.equal(4);\n  expect(response.body['trans-id']).to.match(/^XCASH\\d{6}\\.\\d{4}\\.R\\d{5}$/);\n  // Validate message content\n  const invalidSenderNumberMESSAGE = [\"Desole, vous n'etes pas autorise a effectuer cette transaction.\"];\n  invalidSenderNumberMESSAGE.forEach(part => {\n    expect(response.body.message).to.include(part);\n  });\n});",
                  "err": {},
                  "uuid": "2f98a654-1a3f-43e8-855d-63770a19c83d",
                  "parentUUID": "28586bfd-928a-4064-970f-1007c2912dfb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0ca911b5-0f07-4da9-997f-ebeb3da17ba9",
                "71edc185-a8e1-40c0-ae43-6402cad47422",
                "d01e7c27-0f6d-459b-89ec-83847b36e17e",
                "2f98a654-1a3f-43e8-855d-63770a19c83d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 688,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}